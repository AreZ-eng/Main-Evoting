version: "3.8"

services:
  db:
    image: postgres:latest
    container_name: postgres_db_main_base_2
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_main_base_2:/var/lib/postgresql/data
      - ./backend/setup.sql:/docker-entrypoint-initdb.d/setup.sql
    env_file:
      - .env

  app:
    build:
      context: ./backend
    container_name: app_main_api
    ports:
      - "5443:5000"
    environment:
      - SSL=${SSL}
      - PORT=${PORT}
      - POSTGRES_HOST=db
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - db
    volumes:
      - ./backend/certs:/app_main_api/certs
      - ./backend/initiation.sql:/docker-entrypoint-initdb.d/initiation.sql
    env_file:
      - .env
    command: >
      sh -c "sleep 10 &&
      PGPASSWORD=${POSTGRES_PASSWORD} psql -h db -U ${POSTGRES_USER} -d ${POSTGRES_DB} -f /docker-entrypoint-initdb.d/initiation.sql &&
      npm start"
  frontend:
    build:
      context: ./frontend
    container_name: main_frontend
    ports:
      - "4173:4173"
    environment:
      - NODE_ENV=production
      - VITE_API_BASE_URL=${VITE_API_BASE_URL}
    depends_on:
      - app
    env_file:
      - ./frontend/.env

volumes:
  postgres_data_main_base_2:

networks:
  shared_network:
    external: true
